generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int           @id @default(autoincrement())
  username    String        @unique
  password    String
  email       String        @unique
  sub         String?       @unique
  profilePic  String?
  firebaseUid String?       @unique
  channels    Channel[]
  Comment     Comment[]
  followers   Follow[]      @relation("followee")
  following   Follow[]      @relation("follower")
  JoinRequest JoinRequest[]
  Likes       Like[]
  List        List[]
  Post        Post[]
  Rating      Rating[]
  roles       Role[]
}

model Role {
  id         Int     @id @default(autoincrement())
  user_id    Int
  channel_id Int
  is_admin   Boolean @default(false)
  channel    Channel @relation(fields: [channel_id], references: [id])
  user       User    @relation(fields: [user_id], references: [id])
}

model Follow {
  id          Int  @id @default(autoincrement())
  follower_id Int
  followee_id Int
  followee    User @relation("followee", fields: [followee_id], references: [id])
  follower    User @relation("follower", fields: [follower_id], references: [id])
}

model Channel {
  id          Int           @id @default(autoincrement())
  name        String        @unique
  admin_id    Int?
  private     Boolean       @default(false)
  admin       User?         @relation(fields: [admin_id], references: [id])
  JoinRequest JoinRequest[]
  List        List[]
  Post        Post[]
  members     Role[]
}

model Post {
  id         Int       @id @default(autoincrement())
  title      String
  content    String?
  channel_id Int?
  user_id    Int
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  Comments   Comment[]
  Likes      Like[]
  channel    Channel?  @relation(fields: [channel_id], references: [id])
  author     User      @relation(fields: [user_id], references: [id])
  Rating     Rating[]
}

model List {
  id         Int         @id @default(autoincrement())
  title      String
  content    String?
  channel_id Int?
  user_id    Int
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  Comments   Comment[]
  Like       Like[]
  channel    Channel?     @relation(fields: [channel_id], references: [id])
  author     User        @relation(fields: [user_id], references: [id])
  Posts      List_Post[]
}

model List_Post {
  id      Int    @id @default(autoincrement())
  rank    Int
  list_id Int
  type    String?
  title   String?
  book_id Int?
  book    Book?  @relation(fields: [book_id], references: [id])
  list    List   @relation(fields: [list_id], references: [id])
}

model Comment {
  id      Int    @id @default(autoincrement())
  user_id Int
  post_id Int?
  list_id Int?
  content String
  list    List?  @relation(fields: [list_id], references: [id])
  post    Post?  @relation(fields: [post_id], references: [id])
  user    User   @relation(fields: [user_id], references: [id])
  Like    Like[]
}

model Like {
  id         Int      @id @default(autoincrement())
  user_id    Int
  post_id    Int?
  list_id    Int?
  comment_id Int?
  comment    Comment? @relation(fields: [comment_id], references: [id])
  list       List?    @relation(fields: [list_id], references: [id])
  post       Post?    @relation(fields: [post_id], references: [id])
  user       User     @relation(fields: [user_id], references: [id])
}

model Rating {
  id        Int      @id @default(autoincrement())
  user_id   Int
  book_id   Int?
  value     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  postId    Int?
  content   String?
  title     String
  book      Book?    @relation(fields: [book_id], references: [id])
  Post      Post?    @relation(fields: [postId], references: [id])
  user      User     @relation(fields: [user_id], references: [id])
}

model Book {
  id             Int         @id @default(autoincrement())
  title          String
  author         String
  description    String
  published_date String
  genre          String
  cover_img_url  String?
  List_Posts     List_Post[]
  Ratings        Rating[]
}

model JoinRequest {
  id         Int     @id @default(autoincrement())
  user_id    Int
  channel_id Int
  status     String  @default("pending")
  channel    Channel @relation(fields: [channel_id], references: [id])
  user       User    @relation(fields: [user_id], references: [id])
}
